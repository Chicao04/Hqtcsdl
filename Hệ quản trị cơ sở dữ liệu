
-- chương 12 tạo bảng để xem mà ko làm thay đổi dữ liệu bên trong
use ap_1;
-- Bài 1: Gọi tên nhà cung cấp , thứ tự hóa đơn , tổng hóa đơn , tổng tiền còn nợ 

drop view if exists open_items ;
create view open_items 
as select vendor_name , invoice_number , invoice_total , (invoice_total - payment_total - credit_total ) as balance_due 
from invoices as i 
join vendors as v on v.vendor_id = i.vendor_id 
where invoice_total - payment_total - credit_total  >0 
order by vendor_name;  
select * from open_items ;


-- bài 2  Liệt kê những đối tượng trong bảng open_items có hóa đơn chưa trả trên 1000$ 
select * 
from open_items 
where balance_due > 1000 ; 

-- bài 3 tạo bảng xem có tên là open_items_summary kha báo tên nhà cũng cấp , đếm số tiền nợ , tổng 
drop view if exists open_items_summary; 
create view open_items_summary
as select vendor_name , count(*) as open_items_count , sum(balance_due) as open_items_total 
from open_items 
group by vendor_name 
order by open_items_total desc; 

select * from open_items_summary ;

-- bài 4 viết ra 5 hàng đầu tiên của  bài 3 
select * from open_items_summary 
limit 5; 

-- bài 5 tạo bảng view có khả năng cập nhập 
-- Để tạo một "updatable view" trong SQL, cần phải đảm bảo rằng các điều kiện sau được thỏa mãn:
-- View phải được tạo từ một số bảng cơ sở dữ liệu.
-- View không được chứa các phép toán tổng hợp như GROUP BY hoặc HAVING.
-- Các cột được trả về trong view phải có thể được định danh một cách duy nhất (ví dụ: không được sử dụng các biểu thức phức tạp).
-- các thao tác cập nhật (INSERT, UPDATE, DELETE) trực tiếp trên view đó.

create view  vendor_address 
as select vendor_id , vendor_address1,vendor_address2
from vendors ;


select * from vendor_address ; 

-- câu 6 
update vendor_address
set vendor_address2 = 'Ste 260' 
where vendor_id = 4 ; 



----
-- chương 16 Cách tạo trình kích hoạt và sự kiện
-- Câu lệnh tạo trình kích hoạt  sửa tên trạng thái viết hoa hỗn hợp
use ap_1; 
Drop procedure if exists  vendors_before_update ;
DELIMITER // 
CREATE TRIGGER vendors_before_update 
BEFORE UPDATE ON vendors 
FOR EACH ROW 
BEGIN 
	SET NEW.vendor_state = UPPER(NEW.vendor_state); 
END//  


-- Trình kích hoạt xác thực số lượng mục hàng khi cập nhật hóa đơn
Drop trigger if exists  invoices_before_update;
DELIMITER // 
CREATE TRIGGER invoices_before_update 
	BEFORE UPDATE ON invoices 
	FOR EACH ROW 
BEGIN 
	DECLARE sum_line_item_amount DECIMAL(9,2); 
	SELECT SUM(line_item_amount) 
	INTO sum_line_item_amount 
	FROM invoice_line_items 
	WHERE invoice_id = NEW.invoice_id; 
	IF sum_line_item_amount != NEW.invoice_total THEN 
		Signal SQLSTATE 'HYOOO' 
		SET MESSAGE_TEXT = 'Line item total must match invoice total.'; 
	END IF; 
END// 

UPDATE invoices 
SET invoice_total = 600 
WHERE invoice_id= 100 

select invoice_total
from invoices
where invoice_id = 100;

select * from invoices where invoice_id = 100; 
select * from invoice_line_items where invoice_id =100;
-- Báo cáo tạo bảng kiểm tra cho các hành động trên bảng hóa đơn
drop table if exists invoices_audit
CREATE TABLE invoices_audit
(
	vendor_id         INT             Not null, 
    invoice_number 	  VARCHAR(50)	  NOT NULL,
	invoice_total 	  DECIMAL(9, 2)   NOT NULL, 
    action_type       varchar(50)     not null, 
    action_date       datetime        not null 
)

select * from invoices_audit ;
-- Hai trình kích hoạt AFTER chèn hàng vào bảng kiểm tra
drop trigger if exists invoices_after_insert ;
DELIMITER // 
CREATE TRIGGER invoices_after_insert 
    AFTER INSERT ON invoices 
	FOR EACH ROW 
BEGIN 
	INSERT INTO invoices_audit VALUES 
	(NEW.vendor_id, NEW.invoice_number, NEW.invoice_total, 
	'INSERTED', NOW()); 
END// 

drop trigger if exists invoices_after_delete ; 
delimiter // 
